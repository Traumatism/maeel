"stack" include

λ get [] (Γ)

| Gwt the last element of an array
λ last [xs] (xs xs len 1 - get)

| Get the first element of an array
λ first [] (0 get)

| Get the second element of an array
λ second [] (1 get)

| Get the third element of an array
λ third [] (3 get)

| Merge two arrays
λ merge [xs ys] ({} xs Ω (+) ys Ω (+))

| Get how many times an element appears in an array
λ count [xs element] (
    xs  (element = dup ⇒ (1 swap) not ⇒ (0)) map sum
)

| Apply fn(x) for each x of xs
λ map [xs fn] ({} xs Ω (fn& +))

| Check if an array contains an element
λ contains [xs element] (
    0 @i β α ω (xs i Γ element = ⇒ (α) i 1+ @i i xs len <)
)

| Take n elements from the stack and put them into an array
λ take [n] (
    {} @xs
    0 dup n < ω (swap xs + @xs 1+ dup n <)
    xs reverse
)

| Returns the length of an array.
λ len [] (0 swap Ω (drop 1+))

| Returns a reversed copy of an array.
λ reverse [xs] (
    {} @ys
    xs len dup 1 over over > rot = + ω (
        1- dup xs swap Γ ys+ @ys dup 1 over over > rot = +
    ) ys
)

| Push an element at the begin of an array.
λ push [xs element] (element 1 take xs Ω(+))

| Split an array and its first element.
λ pop [xs] (
    {} @ys
    xs len @xs_len
    xs first 1 take @first_element
    1 dup xs_len< ω(xs over get ys+ @ys 1+ dup xs_len <)
    ys first_element +
)