"std" include

1 2 3 take3                             {1 2 3}                     "take #1"                   assert_eq
0 1 2 3 4 take                          {0 1 2 3}                   "take #2"                   assert_eq
3 2 +                                   5                           "add #1"                    assert_eq
3 2 *                                   6                           "mul #1"                    assert_eq
3 2 -                                   1                           "sub #1"                    assert_eq
0 1 2 3 drop take3                      {0 1 2}                     "drop #1"                   assert_eq
1 2 3 dup 4 take                        {1 2 3 3}                   "dup #1"                    assert_eq
1 2 3 swap take3                        {1 3 2}                     "swap #1"                   assert_eq
1 2 3 swap swap take3                   {1 2 3}                     "swap #2"                   assert_eq
1 2 3 over 4 take                       {1 2 3 2}                   "over #1"                   assert_eq
1 2 3 over over 5 take                  {1 2 3 2 3}                 "over #2"                   assert_eq
1 2 3 rot take3                         {3 1 2}                     "rot #1"                    assert_eq
1 2 3 rot rot take3                     {2 3 1}                     "rot #2"                    assert_eq
1 2 3 rot rot rot take3                 {1 2 3}                     "rot #3"                    assert_eq
1 not                                   0                           "not #1"                    assert_eq
0 not                                   1                           "not #2"                    assert_eq
1 1 and                                 1                           "and #1"                    assert_eq
1 0 and                                 0                           "and #2"                    assert_eq
0 1 and                                 0                           "and #3"                    assert_eq
0 0 and                                 0                           "and #4"                    assert_eq
1 1 or                                  1                           "or #1"                     assert_eq
1 0 or                                  1                           "or #2"                     assert_eq
0 1 or                                  1                           "or #3"                     assert_eq
0 0 or                                  0                           "or #4"                     assert_eq
1 1 xor                                 0                           "xor #1"                    assert_eq
1 0 xor                                 1                           "xor #2"                    assert_eq
0 1 xor                                 1                           "xor #3"                    assert_eq
0 0 xor                                 0                           "xor #4"                    assert_eq
1 pom take2                             {1 0}                       "plus or minus #1"          assert_eq
{1 2 3} last                            3                           "last #1"                   assert_eq
{1 2 3} first                           1                           "first #1"                  assert_eq
{1 1 2} 1 count                         2                           "count #1"                  assert_eq
{1 1 2} 2 count                         1                           "count #2"                  assert_eq
{1 1 2} 3 count                         0                           "count #3"                  assert_eq
{1 2 3} (1 +) map print                 {2 3 4}                     "map #1"                    assert_eq
{1 2 3 4} (even) filter                 {2 4}                       "filter #1"                 assert_eq
1 12 range (odd) filter                 {1 3 5 7 9 11}              "filter #2"                 assert_eq
2 even                                  1                           "even #1"                   assert_eq
3 even                                  0                           "even #2"                   assert_eq
2 odd                                   0                           "odd #1"                   assert_eq
3 odd                                   1                           "odd #2"                   assert_eq
{1 2 3 4 5} (+) 0 reduce                15                          "reduce #1"                 assert_eq
{1 2 3} 1 contains                      1                           "contains #1"               assert_eq
{1 2 3} 4 contains                      0                           "contains #2"               assert_eq
{1 2 3} len                             3                           "len #1"                    assert_eq
{1} len                                 1                           "len #2"                    assert_eq
{} len                                  0                           "len #3"                    assert_eq
{1 2 3} reverse                         {3 2 1}                     "reverse #1"                assert_eq
{} reverse                              {}                          "reverse #2"                assert_eq
{1 2 3} 0 push                          {0 1 2 3}                   "push #1"                   assert_eq
{1 2 3} pop                             {1 {2 3}}                   "pop #1"                    assert_eq
{1 2 3} {4 5 6} merge                   {1 2 3 4 5 6}               "merge #1"                  assert_eq
{4 5 6} {1 2 3} merge                   {4 5 6 1 2 3}               "merge #2"                  assert_eq
{1 2 3} 4 +                             {1 2 3 4}                   "append #1"                 assert_eq
4 {1 2 3} +                             {1 2 3 4}                   "append #2"                 assert_eq
1 {{1 "one"} {2 "two"}} match           "one"                       "match #1"                  assert_eq
2 {{1 "one"} {2 "two"}} match           "two"                       "match #2"                  assert_eq
"hello" string2array                    {"h" "e" "l" "l" "o"}       "string2array #1"           assert_eq
"123" str2int                           123                         "str2int #1"                assert_eq
{"h" "e" "l" "l" "o"} array2string      "hello"                     "array2string #1"           assert_eq
1 bool2string                           "true"                      "bool2string #1"            assert_eq
0 bool2string                           "false"                     "bool2string #2"            assert_eq
2 16 pow                                65536                       "pow #1"                    assert_eq
10 2 pow                                100                         "pow #2"                    assert_eq
2 65536 log                             16                          "log #1"                    assert_eq
10 100 log                              2                           "log #2"                    assert_eq
7 fact                                  5040                        "factorial #1"              assert_eq
3 fact                                  6                           "factorial #2"              assert_eq
7 fact1                                 5040                        "factorial1 #1"             assert_eq
3 fact1                                 6                           "factorial1 #2"             assert_eq
4 sqrt                                  2                           "sqrt #1"                   assert_eq
12 15 gcd								3							"gcd #1"					assert_eq
