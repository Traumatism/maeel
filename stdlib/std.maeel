fun mdrop _ ()

fun mdup a (a a)

fun mswap a b (b a)

fun mover a b (a b a)

fun mrot a b c (c a b)

fun take1 a ({a})

fun take2 a b ({a b})

fun take3 a b c ({a b c})

fun take4 a b c d ({a b c d})

fun inline first (0 get)

fun inline second (1 get)

fun inline third (3 get)

fun inline fourth (4 get)

fun inline and (*)

fun inline or (+ 0= 1 swap -)

fun inline not (1 swap -)

fun inline xor (+ 2%)

fun inline puts (print drop)

fun inline puts_digit (int2char print drop)

fun inline putsln (puts "\n" puts)

fun inline println (print "\n" puts)

fun inline sum (0 swap for (+))

fun inline product (1 swap for (*))

fun inline null (0=)

fun inline inc (1+)

fun inline dec (1-)

fun inline divides (% 0=)

fun inline even (2% 0=)

fun inline odd (2% 1=)

fun inline pom (dup 1 swap -)

fun inline inverse (1 swap/)

fun inline square (dup*)

fun inline cube (dup dup*)

fun inline lteq (over over< rot= + 0= 1 swap -)

fun inline gteq (over over> rot= + 0= 1 swap -)

fun map fn (
    {} swap for (fn&+)
)

fun filter p (
    {} =: xs
    for (dup p& => (xs swap + -> xs))
    xs
)

fun reduce xs fn init (
    init xs for (swap fn&)
)

fun format (
    "" =: output

    for (
        dup ->
            char "%" = => (output swap +)
            char "%" = 1 swap - => (output char +)

        -> output
    )

    output
)

fun formatb (
    "" =: output

    for (
        dup ->
            char "%" = => (swap print drop)
            char "%" = 1 swap - => (print)

        -> output
    )

    output
)

fun match (
    swap -> v

    {} swap for (
        dup 0 get swap 1 get -> f v = => (f+)
    )

    dup 0 = => ("Unknown case!" panic)
    dup 0 swap for (drop 1+)

    1- get
)

fun inline panic ("PANIC: %" format putsln 1 0%)

fun inline unix_input (
    {} 1 while (
        "/dev/stdin" 1 read 0 get dup rot+
        swap 10 = 1 swap -
    )
)

fun unix_random_numbers n mod (
    "/dev/random" n read (mod%) map
)

fun inline assert_eq (
    rot = dup bool2string rot rot
    "% (%)" format putsln
    1 swap - => ("" panic)
)

fun inline len (0 swap for (drop 1+))

fun inline last (
    dup 0 swap for (drop 1+) 1- get
)

fun inline merge (
    {} rot rot for (+) swap for (+)
)

fun count xs x (
    0 xs for (
        x= dup => (1 swap) 1 swap - => 0 +
    )
)

fun contains xs x (
    xs 0 swap for (drop 1+) -> xs_len

    0 =: i
    0 1 while (
        xs i get x = => (drop 1)
        i 1 + -> i i xs_len <
    )
)

fun reverse xs (
    {} -> ys

    xs 0 swap for (drop 1+)

    dup 1 gteq while (
        1- dup xs swap get ys + -> ys
        dup 1 gteq
    )

    drop ys
)

fun pop (
    {} =: ys

    dup 0 swap for (drop 1+) =: xs_len
    dup 0 get take1 =: y =: xs

    1 1 xs_len < while (
        xs over get ys+ -> ys 1+
        dup xs_len <
    )

    ys y+ swap drop
)

fun inline push (take1 swap for (+))

fun inline take (
    0 swap range {} swap
    for (drop +)
    reverse
)

fun inline string2array ({} swap for (+))

fun inline int2char (
    {{0 "0"} {1 "1"} {2 "2"} {3 "3"} {4 "4"}
    {5 "5"} {6 "6"} {7 "7"} {8 "8"} {9 "9"}}
    match
)

fun inline char2int (
    {{"0" 0} {"1" 1} {"2" 2} {"3" 3} {"4" 4}
    {"5" 5} {"6" 6} {"7" 7} {"8" 8} {"9" 9}}
    match
)

fun inline str2int (
    0 swap for (
        swap 10 * swap char2int +
    )
)

fun inline array2string ("" swap for (+))

fun inline bool2string ({{1 "true"} {0 "false"}} match)

fun inline fact (
    dup dup 1 > while (
        1 - dup rot * swap
        dup 1 >
    ) drop
)

fun sqrt x (
    x 2 / 0 5 range for (
        swap dup x
        swap / swap + 2 /
        swap drop
    )
)

fun log base n (
    0 n base gteq while (
        1 + n base / dup =: n base gteq
    )
)

fun pow base _exp (
    {} 0 _exp range for (drop base +) product
)

fun range b (
    {} swap dup b < while (dup rot + swap 1 + dup b <) drop
)

fun gcd n1 n2 (
	n1 n2 > => (n2 -> smaller)
	n1 n2 lteq => (n1 -> smaller)
	1 -> hcf

	1 smaller 1+ range 

	for (-> i n1 i% 0= n2 i% 0= and => (i -> hcf))

	hcf
)
