| Drop the stack top value
fun drop
(
    -> _
)

| Duplicate the stack top value
fun dup a
(
    a a
)

| Swap the two stack top values
fun swap a b
(
    b a
)

| Push the value over the stack top value
| on the stack
fun over a b
(
    a b a
)

| Push the value over the value over the
| stack top value on the stack after swaping
| the two stack top values
fun rot a b c
(
    c a b
)

fun drop2 (
    drop drop
)

fun drop3
(
    drop drop2
)

fun dup2
(
    dup dup
)

fun dup3
(
    dup dup2
)

fun over2
(
    over over
)

fun over3
(
    over over2
)

fun rot2
(
    rot rot
)

fun format
(
    | Output string
    "" -> o

    for
    (
        -> char

        | If the char is a %, push the
        | stack top element (and drop it)
        char "%" =     => (o swap +)

        | Otherwise, push the char
        char "%" = not => (o char +) -> o
    )

    o
)

| Print and drop the stack top value
fun puts
(
    print drop
)

| Print and drop the stack top value
| with a newline
fun putsln
(
    "%\n" format puts
)

| Print the stack top value with a newline
fun println
(
    "%\n" format print
)

| Return { fn(x) | x in xs }
fun map fn
(
    {} swap for (fn& +)
)

| Return ( x if p(x) | x in xs )
fun filter p
(
    {} -> ys

    for
    (
        | If P(x) is true, push x to ys
        dup p& => (ys swap + -> ys)
    )

    ys
)

fun reduce xs fn init
(
    init xs for (swap fn&)
)

fun match
(
    swap -> value

    {} swap for
    (
        dup first swap second -> fn value = => (fn+)
    )

    dup len null => ("Unknown case!" panic)

    last
)

fun xor p q
(
    {p q}

    | XOR logic gate truth table
    {{{1 1} 0} {{0 0} 0} {{0 1} 1} {{1 0} 1}}

    match
)

fun and p q
(
    {p q}

    | AND logic gate truth table
    {{{1 1} 1} {{0 0} 0} {{0 1} 0} {{1 0} 0}}
    match
)

fun or p q
(
    {p q}

    | OR logic gate truth table
    {{{1 1} 1} {{0 0} 0} {{0 1} 1} {{1 0} 1}}
    match
)

fun not
(
    | NOT logic gate truth table
    {{1 0} {0 1}}
    match
)

fun panic
(
    "PANIC: %" format putsln
    1 0 %
)

fun unix_input
(
    {}

    1 while
    (
        | Read one byte from /dev/stdin
        | and add it to output array
        "/dev/stdin" 1 read first dup rot +

        | Stop if char is \n
        swap 10 = not
    )
)

fun unix_random_numbers n mod
(
    | Read n bytes from /dev/random
    "/dev/random" n read

    | Get their modulo
    (mod %) map
)

fun assert_eq
(
    rot = dup bool2string rot2
    "% (%)" format putsln
    not => ("" panic)
)

fun sum
((+) 0 reduce)

fun product
((*) 1 reduce)

fun null
(0 =)

fun inc
(1 +)


fun dec
(1 -)

fun divides
(
    % null
)

fun even
(
    2 divides
)

fun odd
(
    2 divides not
)

fun pom
(
    dup not
)

fun inverse
(
    1 swap/
)

fun square
(
    dup*
)

fun cube
(
    dup square*
)

fun lteq
(
    over2< rot= or
)

fun gteq
(
    over2> rot= or
)

fun len
(
    0 swap for (drop inc)
)

fun first
(
    0 get
)

fun second
(
    1 get
)

fun third
(
    3 get
)

fun last
(
    dup len dec get
)

fun merge
(
    {}
    rot2 for (+)
    swap for (+)
)

fun count xs x
(
    xs
    (x= dup => (1 swap) not => (0))
    map
    sum
)

fun contains xs x
(
    xs len -> xs_len
    0 -> i

    0 1 while
    (
        xs i get x = => (drop 1)
        i inc -> i
        i xs_len <
    )
)

fun reverse xs
(
    {} -> ys

    xs len dup 1 gteq while
    (
        dec dup xs swap get ys+ -> ys
        dup 1 gteq
    )

    drop ys
)

fun pop xs
(
    {} -> ys
    xs len -> xs_len
    xs first take1 -> y 1

    dup xs_len < while
    (
        xs over get ys+ -> ys inc dup xs_len <
    )

    ys y + swap drop
)

fun push
(
    take1
    swap
    for (+)
)

fun take n
(
    {} -> xs

    0 n range for
    (
        drop xs + -> xs
    )

    xs reverse
)

fun take1 a
(
    {a}
)

fun take2 a b
(
    {a b}
)

fun take3 a b c
(
    {a b c}
)

fun string2array
(
    {} swap
    for (+)
)

| Convert a digit to a char
fun int2char
(
    {{0 "0"} {1 "1"} {2 "2"} {3 "3"} {4 "4"}
    {5 "5"} {6 "6"} {7 "7"} {8 "8"} {9 "9"}}
    match
)

| Convert a single character into an integer
fun char2int
(
    {{"0" 0} {"1" 1} {"2" 2} {"3" 3} {"4" 4}
    {"5" 5} {"6" 6} {"7" 7} {"8" 8} {"9" 9}}
    match
)

| Convert a string into an integer
fun str2int
(
    0 swap for
    (
        swap 10 * swap char2int +
    )
)

| Convert an array into a string
fun array2string
(
    "" swap
    for (+)
)

fun bool2string
(
    {{1 "true"} {0 "false"}}
    match
)

fun fact n
(
    1 n inc range product
)

| Square root approximation
fun sqrt x
(
    0 5 range
    (dup x swap/ swap+ 2/ swap drop)
    x 2/
    reduce
)

fun log base n
(
    0

    n base gteq while
    (
        | Increase the counter
        inc

        | Put n/base into n
        n base / dup -> n 

        | if n <= base, then continue
        base gteq 
    )
)

fun pow base exp
(
    | Generate a list of size 'exp' with only 'base'
    | and multiply all these 'base' togather
    0 exp range (drop base) map product
)

fun range start end
(
    {}  | Output list
    start end < while
    (
        | Push 'start' to the output list
        | and increase 'start' value
        start + start inc -> start

        start end <
    )
)
