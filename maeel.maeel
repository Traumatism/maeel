0 ~ false
1 ~ true

# Remove stack top element
fun inline drop __ ()

# Duplicate stack top element
fun inline dup __a (__a __a)

# Rotate stack top 3 elements
fun inline rot __a __b __c (__c __a __b)

# Swap stack top 2 elements
fun inline swap __a __b (__b __a)

# Duplicate the element under stack top
fun inline over __a __b (__a __b __a)

# While loop implementation
fun inline while __fn __pr (
    __pr!  # execute the predicate function (should return 0 or 1)
    ? (  # if predicate returns 1
        __fn!  # execute loop block
        __fn __pr while  # recursive call
    )
)

# For loop implementation
fun inline for __xs __for_loop_fn (
    __xs len ~ _maeel_for_loop_xs_len  # max index

    0 ~ _maeel_for_loop_index  # current index in list

    (
        __xs _maeel_for_loop_index get  # push list current element
        __for_loop_fn!                  # execute loop block
        _maeel_for_loop_index 1 +~ _maeel_for_loop_index  # increment current index
    )

    # make sure we aren't doing an "index out of range" [1]
    (_maeel_for_loop_index _maeel_for_loop_xs_len <)

    while  # continue until: index = len(xs) [1]
)

# Kind of switch/case statement implementation
fun matchp value mapper predicate (
    mapper len ~ mapper_len

    list 0 (
        dup 2 % 0= ? (
            mapper over get value predicate!
            ? (mapper over 1+ get rot rot+ swap)
        ) 1+
    ) (dup mapper_len <) while

    drop
)

fun inline match ((=) matchp 0 get)

fun reverse xs (
    list ~ ys
	xs len (1- dup xs swap get ys +~ ys) (dup 1 < not) while drop ys
)

fun contains xs x (
    xs len ~xs_len 0 ~i 0 (xs i get x = ? (drop 1) i 1+ ~i) (i xs_len <) while
)

"__maeel_list_start"   ~ List
"__maeel_mapper_start" ~ Mapper

fun end (
    list
        List  +
        Mapper +

    ~ stop_keywords

    list ~ output
    (output +~ output) (dup stop_keywords swap contains not) while

    list
        List+ (output reverse)+

        Mapper+ (
            0 ~ i
            output len ~ lst_len
            list ~ mapper
            output (
                i 2% 0= ? (list output i 1+ get+ output i get+ mapper +~ mapper) i 1 +~ i
            ) (i lst_len <) while

            mapper
        )+

    match!
)

fun take1 a (List a end)

fun take2 a b (List a b end)

fun take3 a b c (List a b c end)

fun take4 a b c d (List a b c d end)

fun inline take (0 swap range list swap (drop +) for reverse)

# Count function
# Usage: xs x count
#
# Pushes the number of occurence of x in xs.
#
# Examples:
# - ``` {1 2 3 3 4} 3 count ``` will return 2
# - ``` {1 2 3 3 4} 4 count ``` will return 1
# - ``` {1 2 3 3 4} 42 count ``` will return 0
fun count x (0 swap (x = pom ? (0) ? (1 swap) +) for)

# Range function
# Usage: a b range
#
# Pushes an array with all the numbers N such that a-1 < N < b
#
# Example:
# - ``` 1 10 range ``` will return {1 2 3 4 5 6 7 8 9}
fun range b (list swap (dup rot+ swap 1+) (dup b<) while drop)

# Last function
# Usage: xs last
#
# Pushes the last element of an array (drops the array)
#
# Examples:
# - ``` {3 2 1} last ``` will return 1
# - ``` {1 2 3} last ``` will return 3
# - ``` {2} last ``` will return 2
fun inline last (dup len 1- get)

# Merge function
# Usage: xs ys range
#
# Merges two arrays togather
#
# Examples:
# - ``` {1 2 3} {4 5 6} merge ``` will return {1 2 3 4 5 6}
# - ``` {1} {1} merge ``` will return {1 1}
fun inline merge (list rot rot (+) for swap (+) for)

# Map function
# Usage xs f map
#
# Applies f(x) for each element x of xs
#
# Examples:
# - ``` {1 2 3} (1+) map ``` will return {2 3 4}
# - ``` {1 2 3} (4*) map ``` will return {4 8 12}
fun inline map (list rot swap (over! rot rot+ swap) for drop)

fun inline reduce (swap ~ _reduce_fn swap (swap _reduce_fn!) for)

fun filter pr (list ~ xs (dup pr! ? (xs swap +~ xs)) for xs)

fun ifelse (1 rot 0 swap take4 match!)

fun inline and (*)

fun inline or (+ 0= 1 swap-)

fun inline not (1 swap-)

fun inline xor (+ 2 %)

fun inline pom (dup not)

fun inline mop (pom swap)

fun fact (dup (1- dup rot * swap) (dup 1 >) while drop)

fun fact1 (1+ 1 swap range (*) 1 reduce)

fun sqrt x (x 0.5* 0 5 range (swap dup x swap/ swap+ 0.5* swap drop) for)

fun log base x (0 (1+ x base /~ x) (x base < not) while)

fun pow base exp (list 0 exp range (drop base+) for (*) 1 reduce )

fun inline print (dup puts)

fun inline puts_digit (int2char print drop)

fun inline putsln (puts "\n" puts)

fun inline println (print "\n" puts)

#
# Usage:  name age "My name is %. I'm %" format putsln
#
fun format (
    "" ~ output
    (dup ~ char "%" = (output swap) (output char) ifelse +~ output) for
    output
)

#
# Usage:  "123" int 4 + putsln
#
fun inline int (
    0 swap (
        swap 10 * swap
        List
            "0" 0 "1" 1 "2" 2 "3" 3 "4" 4
            "5" 5 "6" 6 "7" 7 "8" 8 "9" 9
        end
        match+
    ) for
)

fun unix_random_numbers n mod (
	"/dev/random" n read (mod %) map
)
